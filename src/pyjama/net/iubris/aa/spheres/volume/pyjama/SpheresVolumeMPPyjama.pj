package net.iubris.aa.spheres.volume.pyjama;

import java.util.LinkedList;
import java.util.concurrent.CopyOnWriteArrayList;

import net.iubris.aa.spheres.volume.AbstractSpheresVolume;
import net.iubris.aa.spheres.model.Point;
import net.iubris.aa.spheres.model.Sphere;

public class SpheresVolumeMPPyjama extends AbstractSpheresVolume {
		
	public SpheresVolumeMPPyjama(String inFileName, double randomPointsUsed) {
		super(inFileName, randomPointsUsed);
		this.randomPointsFound = 
//new ArrayList<Point>();
new CopyOnWriteArrayList<Point>();
	}
	
	@Override
	public void calculate() {
		checkPointsByPyjama();
		calculateVolume();
	}
	
	protected void checkPointsByPyjama() {
		int howSpheres = spheres.length;
		//#omp parallel for async nowait
		for (int i=0;i<randomPointsUsed;i++) {
//			System.out.print( Pyjama.omp_get_thread_num()+" " );
			Point rp = randomPoints[i];
			for (int j=0;j<howSpheres;j++) {
				Sphere s = spheres[j];
				if (s.contains(rp)) {
					randomPointsFoundedNumber++;					
					// minimal code end here. below is just for info and rendering
					storeMoreInfo(s,rp);
					break;
				}
			}
		}
	}
}
